global:
  scrape_interval: 15s
alerting:
  alertmanagers:
  - static_configs:
    - targets:
      - 'alertmanager.default.svc.cluster.local:9093'
scrape_configs:

- job_name: 'istio-mesh'
  # Override the global default and scrape targets from this job every 5 seconds.
  scrape_interval: 5s

  kubernetes_sd_configs:
  - role: endpoints
    namespaces:
      names:
      - istio-system

  relabel_configs:
  - source_labels: [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
    action: keep
    regex: istio-telemetry;prometheus


# Scrape config for envoy stats
- job_name: 'envoy-stats'
  metrics_path: /stats/prometheus
  kubernetes_sd_configs:
  - role: pod

  relabel_configs:
  - source_labels: [__meta_kubernetes_pod_container_port_name]
    action: keep
    regex: '.*-envoy-prom'
  - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
    action: replace
    regex: ([^:]+)(?::\d+)?;(\d+)
    replacement: $1:15090
    target_label: __address__
  - action: labelmap
    regex: __meta_kubernetes_pod_label_(.+)
  - source_labels: [__meta_kubernetes_namespace]
    action: replace
    target_label: namespace
  - source_labels: [__meta_kubernetes_pod_name]
    action: replace
    target_label: pod_name

  metric_relabel_configs:
  # Exclude some of the envoy metrics that have massive cardinality
  # This list may need to be pruned further moving forward, as informed
  # by performance and scalability testing.
  - source_labels: [ cluster_name ]
    regex: '(outbound|inbound|prometheus_stats).*'
    action: drop
  - source_labels: [ tcp_prefix ]
    regex: '(outbound|inbound|prometheus_stats).*'
    action: drop
  - source_labels: [ listener_address ]
    regex: '(.+)'
    action: drop
  - source_labels: [ http_conn_manager_listener_prefix ]
    regex: '(.+)'
    action: drop
  - source_labels: [ http_conn_manager_prefix ]
    regex: '(.+)'
    action: drop
  - source_labels: [ __name__ ]
    regex: 'envoy_tls.*'
    action: drop
  - source_labels: [ __name__ ]
    regex: 'envoy_tcp_downstream.*'
    action: drop
  - source_labels: [ __name__ ]
    regex: 'envoy_http_(stats|admin).*'
    action: drop
  - source_labels: [ __name__ ]
    regex: 'envoy_cluster_(lb|retry|bind|internal|max|original).*'
    action: drop


- job_name: 'istio-policy'
  # Override the global default and scrape targets from this job every 5 seconds.
  scrape_interval: 5s
  # metrics_path defaults to '/metrics'
  # scheme defaults to 'http'.

  kubernetes_sd_configs:
  - role: endpoints
    namespaces:
      names:
      - istio-system


  relabel_configs:
  - source_labels: [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
    action: keep
    regex: istio-policy;http-monitoring

- job_name: 'istio-telemetry'
  # Override the global default and scrape targets from this job every 5 seconds.
  scrape_interval: 5s
  # metrics_path defaults to '/metrics'
  # scheme defaults to 'http'.

  kubernetes_sd_configs:
  - role: endpoints
    namespaces:
      names:
      - istio-system

  relabel_configs:
  - source_labels: [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
    action: keep
    regex: istio-telemetry;http-monitoring

- job_name: 'pilot'
  # Override the global default and scrape targets from this job every 5 seconds.
  scrape_interval: 5s
  # metrics_path defaults to '/metrics'
  # scheme defaults to 'http'.

  kubernetes_sd_configs:
  - role: endpoints
    namespaces:
      names:
      - istio-system

  relabel_configs:
  - source_labels: [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
    action: keep
    regex: istio-pilot;http-monitoring

- job_name: 'galley'
  # Override the global default and scrape targets from this job every 5 seconds.
  scrape_interval: 5s
  # metrics_path defaults to '/metrics'
  # scheme defaults to 'http'.

  kubernetes_sd_configs:
  - role: endpoints
    namespaces:
      names:
      - istio-system

  relabel_configs:
  - source_labels: [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
    action: keep
    regex: istio-galley;http-monitoring

# scrape config for API servers
- job_name: 'kubernetes-apiservers'
  kubernetes_sd_configs:
  - role: endpoints
    namespaces:
      names:
      - default
  scheme: https
  tls_config:
    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
  relabel_configs:
  - source_labels: [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
    action: keep
    regex: kubernetes;https

# scrape config for nodes (kubelet)
- job_name: 'kubernetes-nodes'
  scheme: https
  tls_config:
    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
  kubernetes_sd_configs:
  - role: node
  relabel_configs:
  - action: labelmap
    regex: __meta_kubernetes_node_label_(.+)
  - target_label: __address__
    replacement: kubernetes.default.svc:443
  - source_labels: [__meta_kubernetes_node_name]
    regex: (.+)
    target_label: __metrics_path__
    replacement: /api/v1/nodes/${1}/proxy/metrics

# Scrape config for Kubelet cAdvisor.
#
# This is required for Kubernetes 1.7.3 and later, where cAdvisor metrics
# (those whose names begin with 'container_') have been removed from the
# Kubelet metrics endpoint.  This job scrapes the cAdvisor endpoint to
# retrieve those metrics.
#
# In Kubernetes 1.7.0-1.7.2, these metrics are only exposed on the cAdvisor
# HTTP endpoint; use "replacement: /api/v1/nodes/${1}:4194/proxy/metrics"
# in that case (and ensure cAdvisor's HTTP server hasn't been disabled with
# the --cadvisor-port=0 Kubelet flag).
#
# This job is not necessary and should be removed in Kubernetes 1.6 and
# earlier versions, or it will cause the metrics to be scraped twice.
- job_name: 'kubernetes-cadvisor'
  scheme: https
  tls_config:
    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
  kubernetes_sd_configs:
  - role: node
  relabel_configs:
  - action: labelmap
    regex: __meta_kubernetes_node_label_(.+)
  - target_label: __address__
    replacement: kubernetes.default.svc:443
  - source_labels: [__meta_kubernetes_node_name]
    regex: (.+)
    target_label: __metrics_path__
    replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor

# scrape config for service endpoints.
- job_name: 'kubernetes-service-endpoints'
  kubernetes_sd_configs:
  - role: endpoints
  relabel_configs:
  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
    action: keep
    regex: true
  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
    action: replace
    target_label: __scheme__
    regex: (https?)
  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
    action: replace
    target_label: __metrics_path__
    regex: (.+)
  - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
    action: replace
    target_label: __address__
    regex: ([^:]+)(?::\d+)?;(\d+)
    replacement: $1:$2
  - action: labelmap
    regex: __meta_kubernetes_service_label_(.+)
  - source_labels: [__meta_kubernetes_namespace]
    action: replace
    target_label: kubernetes_namespace
  - source_labels: [__meta_kubernetes_service_name]
    action: replace
    target_label: kubernetes_name

- job_name: 'kubernetes-pods'
  kubernetes_sd_configs:
  - role: pod
  relabel_configs:  # If first two labels are present, pod should be scraped  by the istio-secure job.
  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
    action: keep
    regex: true
  - source_labels: [__meta_kubernetes_pod_annotation_sidecar_istio_io_status]
    action: drop
    regex: (.+)
  - source_labels: [__meta_kubernetes_pod_annotation_istio_mtls]
    action: drop
    regex: (true)
  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
    action: replace
    target_label: __metrics_path__
    regex: (.+)
  - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
    action: replace
    regex: ([^:]+)(?::\d+)?;(\d+)
    replacement: $1:$2
    target_label: __address__
  - action: labelmap
    regex: __meta_kubernetes_pod_label_(.+)
  - source_labels: [__meta_kubernetes_namespace]
    action: replace
    target_label: namespace
  - source_labels: [__meta_kubernetes_pod_name]
    action: replace
    target_label: pod_name

- job_name: 'kubernetes-pods-istio-secure'
  scheme: https
  tls_config:
    ca_file: /etc/istio-certs/root-cert.pem
    cert_file: /etc/istio-certs/cert-chain.pem
    key_file: /etc/istio-certs/key.pem
    insecure_skip_verify: true  # prometheus does not support secure naming.
  kubernetes_sd_configs:
  - role: pod
  relabel_configs:
  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
    action: keep
    regex: true
  # sidecar status annotation is added by sidecar injector and
  # istio_workload_mtls_ability can be specifically placed on a pod to indicate its ability to receive mtls traffic.
  - source_labels: [__meta_kubernetes_pod_annotation_sidecar_istio_io_status, __meta_kubernetes_pod_annotation_istio_mtls]
    action: keep
    regex: (([^;]+);([^;]*))|(([^;]*);(true))
  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
    action: replace
    target_label: __metrics_path__
    regex: (.+)
  - source_labels: [__address__]  # Only keep address that is host:port
    action: keep    # otherwise an extra target with ':443' is added for https scheme
    regex: ([^:]+):(\d+)
  - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
    action: replace
    regex: ([^:]+)(?::\d+)?;(\d+)
    replacement: $1:$2
    target_label: __address__
  - action: labelmap
    regex: __meta_kubernetes_pod_label_(.+)
  - source_labels: [__meta_kubernetes_namespace]
    action: replace
    target_label: namespace
  - source_labels: [__meta_kubernetes_pod_name]
    action: replace
    target_label: pod_name
- job_name: 'aixiangdao'
  tls_config:
    insecure_skip_verify: true
  scrape_interval: 5s
  scrape_timeout: 5s
  metrics_path: /probe
  params:
    module: [http_2xx] 
  scheme: http
  static_configs:
    - targets: ['api.aixiangdao.tech/actuator/health', 'api.admin.aixiangdao.tech/actuator/health']
      labels:
        group: 'production'
        app: axd-gateway
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: blackbox.default.svc.cluster.local:9115
- job_name: 'post_city'
  tls_config:
    insecure_skip_verify: true
  scrape_interval: 5s
  scrape_timeout: 5s
  metrics_path: /probe
  params:
    module: [http_post_city] 
  scheme: http
  static_configs:
    - targets:
      - api.aixiangdao.tech/getCityBanners
      - api.aixiangdao.tech/getCityTopics
      - api.aixiangdao.tech/getCityRecommandCategories
      - api.aixiangdao.tech/getCityCategories
      - api.aixiangdao.tech/getRegions
      labels:
        group: 'production'
        app: axd-basic
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: blackbox.default.svc.cluster.local:9115
- job_name: 'post_product'
  tls_config:
    insecure_skip_verify: true
  scrape_interval: 5s
  scrape_timeout: 5s
  metrics_path: /probe
  params:
    module: [http_post_product] 
  scheme: http
  static_configs:
    - targets:
      - api.aixiangdao.tech/getProductDetail
      - api.aixiangdao.tech/getProductBrief
      labels:
        group: 'production'
        app: axd-merchant
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: blackbox.default.svc.cluster.local:9115
- job_name: 'post_merchant'
  tls_config:
    insecure_skip_verify: true
  scrape_interval: 5s
  scrape_timeout: 5s
  metrics_path: /probe
  params:
    module: [http_post_merchant] 
  scheme: http
  static_configs:
    - targets:
      - api.aixiangdao.tech/getProducts
      - api.aixiangdao.tech/getMerchantServices
      - api.aixiangdao.tech/getMerchantAttachments
      - api.aixiangdao.tech/getMerchantDesc
      - api.aixiangdao.tech/getMerchantDishes
      labels:
        group: 'production'
        app: axd-merchant
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: blackbox.default.svc.cluster.local:9115
- job_name: 'http_post'
  tls_config:
    insecure_skip_verify: true
  scrape_interval: 5s
  scrape_timeout: 5s
  metrics_path: /probe
  params:
    module: [http_post] 
  scheme: http
  static_configs:
    - targets:
      - api.aixiangdao.tech/order/rms/order/ordinary/search
      - api.aixiangdao.tech/merchant/getRmsMerchants
      labels:
        group: 'production'
        app: axd-user
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: blackbox.default.svc.cluster.local:9115
- job_name: 'http_post_AppMerchants'
  tls_config:
    insecure_skip_verify: true
  scrape_interval: 5s
  scrape_timeout: 5s
  metrics_path: /probe
  params:
    module: [http_post_AppMerchants] 
  scheme: http
  static_configs:
    - targets:
      - api.aixiangdao.tech/getAppMerchants
      labels:
        group: 'production'
        app: axd-merchant
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: blackbox.default.svc.cluster.local:9115
- job_name: 'http_post_getUsers'
  tls_config:
    insecure_skip_verify: true
  scrape_interval: 5s
  scrape_timeout: 5s
  metrics_path: /probe
  params:
    module: [http_post_getUsers] 
  scheme: http
  static_configs:
    - targets:
      - api.aixiangdao.tech/user/getUsers
      labels:
        group: 'production'
        app: axd-user
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: blackbox.default.svc.cluster.local:9115
rule_files:
- /prometheus/rule/alerts/*.yaml

---
alerting_rules.yaml

groups:
- name: prod
  rules:
  - alert: InstanceDown
    expr: up == 0
    for: 10s
    labels:
      severity: page
    annotations:
      summary: "Instance {{ $labels.instance }} down"
      description: "{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 5 minutes."

  # Alert for any instance that has a median request latency >1s.
  - alert: APIHighRequestLatency
    expr: probe_http_duration_seconds{group="production"} > 1
    for: 1m
    annotations:
      summary: "High request latency on {{ $labels.instance }}"
      description: "{{ $labels.instance }} has a median request latency above 1s (current value: {{ $value }}s)"
  # 404
  - alert: httpStatusCode
    expr: probe_http_status_code != 200 or probe_http_status_code != 0
    for: 30s
    annotations:
      summary: "http status code {{ $labels.instance }}"
      description: "{{ $labels.instance }} has return (current value: {{ $value }})"
  